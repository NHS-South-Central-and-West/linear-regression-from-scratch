---
title: "Linear Regression from Scratch"
subtitle: "Building a Simple Linear Model to Better Understand Regression Methods"
author: "Paul Johnson"
---

```{r}
#| label: setup
#| include: false

# import packages
suppressPackageStartupMessages({
  library(dplyr)
  library(ggplot2)
  library(gt)
})

# set plot theme
theme_set(scwplot::theme_scw(base_size = 10)) +
  theme_update(
    plot.title = element_text(margin = margin(b = 5)),
    legend.text = element_text(colour = "#5D5F5F", size = rel(.8)),
    legend.key.width = unit(.75, "cm"),
    plot.margin = margin(c(t = .5, r = 0, b = .5, l = .5), unit = "cm")
  )

# import data
df <- 
  readr::read_csv(here::here("data", "student-performance.csv")) |> 
  mutate(across(where(is.character), as.factor))
```

# The Fundamentals of Regression {data-background-color="#425563" data-verticator="#E8EDEE"}

Get in Loser, We're **Fitting Lines to Data**

## What is Regression? {.center}

- Regression models predict an outcome variable from a set of predictors. This can take the form of straight lines fit through the data, to many non-linear generalisations [@gelman2021].
- Regression can be used to describe the association between variables, estimate the effect that a treatment has on an outcome, or predict how an outcome will change in response to changes in the predictor variables.
- It is the foundation for many advanced statistical methods, and it is one of the most important tools available to an analyst seeking to use a sample to make inferences or predictions about the population [@rowntree2018].
- While powerful, the method itself is (relatively) simple, when boiled down to its component parts.

## It's All About the (Co)Variance {.center}

- It is possible to make predictions or estimate effects between quantities of interest by analysing how they vary, both independently and together.
- The extent to which the predictor variable, $X$, and the outcome, $Y$, move together is called "covariance".
  - A positive covariance indicates that the values of $X$ and $Y$ tend to increase and decrease together, while a negative covariance indicates that when $X$ decreases $Y$ increases.
- Regression fits a line through data that estimate how the outcome variable changes when the value of the predictor variable(s) change. Finding the line that does the most effective job of passing through the data helps describe the relationship between the variables, or predict the outcome from the predictors.
- This doesn't sound like much, but it's a surprisingly powerful idea.

## Fitting a Line Through Data {.center}

- At it's most basic conceptual level, regression is just finding the line of best fit through the data. 
  - The complexity comes in the need to use precise, unbiased methods to find the "best" fit.
- There are various "estimators" that can be used to fit a straight line to data, but the most common method is called ordinary least squares (OLS).
- OLS finds the line of best fit by minimising the total distance between the line and all observed values. The distance between the line, which represents the model's fitted values (or the predicted value of $Y$ given $X$) and each observed value in the data is known as the residual.
- All paths lead to minimising the residuals.

## Visualising the Outcome Variance {.center}

```{r}
#| label: outcome-dist

df |> 
  ggplot(aes(x = exam_score)) +
  geom_histogram(binwidth = 1) +
  labs(x = "Exam Score", y = NULL)
```

## Visualising the Outcome Variance {.center}

```{r}
#| label: filtered-outcome-dist

df <- df |> filter(exam_score < 80)
  
df |> 
  ggplot(aes(x = exam_score)) +
  geom_histogram(binwidth = 1) +
  labs(x = "Exam Score", y = NULL)
```

## Visualising the Predictor Variance {.center}

```{r}
#| label: predictor-dist

df |> 
  ggplot(aes(x = hours_studied)) +
  geom_histogram(binwidth = 1) +
  labs(x = "Hours Studied", y = NULL)
```

## Visualising their Covariance {.center}

```{r}
#| label: covariance

df |> 
  ggplot(aes(x = hours_studied, y = exam_score)) +
  geom_point(shape = 21, fill = "white", size = 1.5, stroke = 1) +
  labs(x = "Hours Studied", y = "Exam Score")
```

## Fitting a Regression Line {.center}

```{r}
#| label: regression-line

df |> 
  ggplot(aes(x = hours_studied, y = exam_score)) +
  geom_point(shape = 21, fill = "white", size = 1.5, stroke = 1) +
  geom_smooth(
    method = lm, se = FALSE, linewidth = 1, colour = "#005EB8"
    ) +
  labs(x = "Hours Studied", y = "Exam Score")
```

## Finding the Line of "Best Fit" {.center}

```{r}
#| label: fitted-values

model <- lm(exam_score ~ hours_studied, data = df)

df <-
  df |> 
  mutate(
    fitted = model$fitted.values, 
    residual = model$residuals
    )

df |> 
  select(hours_studied, exam_score, fitted, residual) |> 
  janitor::clean_names(case = "title") |> 
  slice_sample(n = 10) |> 
  gt() |> 
  fmt_number(columns = c(Fitted, Residual), decimals = 2) |> 
  cols_align(align = "center", columns = everything())
```

## Finding the Line of "Best Fit" {.center}

```{r}
#| label: residuals

df |> 
  ggplot(aes(x = hours_studied, y = exam_score)) +
  geom_segment(
    aes(
      x = hours_studied, y= fitted, 
      xend = hours_studied, yend = fitted + residual
      ), 
    linewidth = 1, color = "#ED8B00"
    ) +
  geom_point(shape = 21, fill = "white", size = 1.5, stroke = 1) +
  geom_line(
    aes(x = hours_studied, y = fitted), 
    linewidth = 1, colour = "#005EB8"
    ) +
  labs(x = "Hours Studied", y = "Exam Score")
```

## Finding the Line of "Best Fit" {.center}

```{r}
#| label: residuals-sample

df |>
  slice_sample(n = 10) |> 
  ggplot(aes(x = hours_studied, y = exam_score)) +
  geom_segment(
    aes(
      x = hours_studied, y= fitted, 
      xend = hours_studied, yend = fitted + residual
      ), 
    linewidth = 1, color = "#ED8B00"
    ) +
  geom_point(shape = 21, fill = "white", size = 1.5, stroke = 1) +
  geom_line(
    aes(x = hours_studied, y = fitted), 
    linewidth = 1, colour = "#005EB8"
    ) +
  labs(x = "Hours Studied", y = "Exam Score")
```

## Finding the Line of "Best Fit" {.center}

```{r}
#| label: residuals-bigger-sample

df |>
  slice_sample(n = 100) |> 
  ggplot(aes(x = hours_studied, y = exam_score)) +
  geom_segment(
    aes(
      x = hours_studied, y= fitted, 
      xend = hours_studied, yend = fitted + residual
      ), 
    linewidth = 1, color = "#ED8B00"
    ) +
  geom_point(shape = 21, fill = "white", size = 1.5, stroke = 1) +
  geom_line(
    aes(x = hours_studied, y = fitted), 
    linewidth = 1, colour = "#005EB8"
    ) +
  labs(x = "Hours Studied", y = "Exam Score")
```

## Finding the Line of "Best Fit" {.center}

```{r}
#| label: residuals-full-sample

df |>
  ggplot(aes(x = hours_studied, y = exam_score)) +
  geom_segment(
    aes(
      x = hours_studied, y= fitted, 
      xend = hours_studied, yend = fitted + residual
      ), 
    linewidth = 1, color = "#ED8B00"
    ) +
  geom_point(shape = 21, fill = "white", size = 1.5, stroke = 1) +
  geom_line(
    aes(x = hours_studied, y = fitted), 
    linewidth = 1, colour = "#005EB8"
    ) +
  labs(x = "Hours Studied", y = "Exam Score")
```

## Minimising the Residuals {.center}

- The least squares estimator takes the residual value of all of the regression's predictions, squares them, and then sums them to get a single value that captures how well the model fits to the data.
  - Squaring the value of each residual ensures sure that all values are positive, so that they don't cancel each other out, and gives greater weight to larger residuals, making sure that the fitted line accounts for values that are far away from the mean. This value is known as the residual sum of squares (RSS). 
  - $\text{RSS} = \sum_{i=1}^n \left( y_i - (\beta_0 + \beta_1 x_i) \right)^2$
- Finding the line that minimises the RSS produces an unbiased linear estimator (assuming that the regression assumptions are all met), or the line of best fit!

## Solve for $\beta_0$ and $\beta_1$; Minimise RSS {.center .smaller}

$$\min_{\hat\beta_0,\hat\beta_1} \sum_{i=1}^n \left( y_i - (\hat\beta_0 + \hat\beta_1 x_i) \right)^2$$

- Minimising RSS gives us the line that best fits the data, but we don't know what $\beta_0$ or $\beta_1$ are!

::::::{.columns}
::::::{.column}

- **Solving for $\beta_0$:**

- Differentiate: $\frac{\partial}{\partial \hat{\beta}_0} \text{RSS} = -2 \sum_{i=1}^n \left( y_i - (\hat{\beta}_0 + \hat{\beta}_1 x_i) \right)$
  
- Solve: $\hat\beta_0 = \bar{y} - \hat\beta_1 \bar{x}$

:::::
::::::{.column}

- **Solving for $\beta_1$:**

- Differentiate: $\frac{\partial}{\partial \hat{\beta}_1} \text{RSS} = -2 \sum_{i=1}^n x_i \left( y_i - (\hat{\beta}_0 + \hat{\beta}_1 x_i) \right)$

- Solve: $\hat{\beta}_1 = \frac{\sum_{i=1}^n (x_i - \bar{x})(y_i - \bar{y})}{\sum_{i=1}^n (x_i - \bar{x})^2}$

:::::
::::::

- Final coefficients: $\beta_1 = \frac{\text{Cov}(X, Y)}{\text{Var}(X)}, \quad \beta_0 = \bar{y} - \beta_1 \bar{x}$


# The Components of Simple Linear Regression {data-background-color="#425563" data-verticator="#E8EDEE"}

Our good friends $\beta_1$, $\beta_0$, and $\epsilon$.

## The Most Perfect Little Equation {.center}

- The formula for a simple linear regression model, predicting $Y$ with one predictor $X$: 

$$
Y = 
\underbrace{\vphantom{\beta_0} \overset{\color{#41B6E6}{\text{Intercept}}}{\color{#41B6E6}{\beta_0}} + 
\overset{\color{#005EB8}{\text{Slope}}}{\color{#005EB8}{\beta_1}}X \space \space}_{\text{Explained Variance}} + 
\overset{\mathstrut \color{#ED8B00}{\text{Error}}}{\underset{\text{Unexplained}}{\color{#ED8B00}{\epsilon}}}
$$

- This breaks the problem down into three components, and estimates two parameters:
  - $\beta_1$ - The slope, estimating the effect that $X$ has on the outcome, $Y$. 
  - $\beta_0$ - The intercept, estimating the average value of $Y$ when $X = 0$.
  - $\epsilon$ - The error term, capturing the remaining variance in the outcome $Y$ that is not explained by the rest of the model.

## Calculating the Regression Slope ($\beta_1$) {.center}

$$\beta_1 = \frac{\text{Cov}(X, Y)}{\text{Var}(X)} = \frac{\sum (x_i - \bar{x})(y_i - \bar{y})}{\sum (x_i - \bar{x})^2} $$


## Calculating the Regression Intercept ($\beta_0$) {.center}

$$\beta_0 = \bar{y} - \beta_1 \bar{x} $$

## Predicting the Outcome ($\hat{y}$) {.center}

$$\hat{y}_i = \beta_0 + \beta_1 x_i $$

# Let's Write Some Code! {data-background-color="#425563" data-verticator="#E8EDEE"}

# From Simple to Multiple Regression {data-background-color="#425563" data-verticator="#E8EDEE"}

What Happens When We Add More Predictors?

## It's Just a Regression With More Variables! {.center}

$$Y = \beta_0 + \beta_1 X_1 + \beta_2 X_2 + ... + \beta_n X_n + \epsilon$$

# Wrapping Up {data-background-color="#425563" data-verticator="#E8EDEE"}

Where Next, Magic Math Man?

## What We Haven't Covered {.center}

- Model interpretation - Reading regression tables, understanding coefficients
- Model evaluation - $R^2$, Root Mean Squared Error (RMSE)
- Assumptions of linear regression - Linearity, independence, homoscedasticity, no multicollinearity
- Model diagnostics

## The Magic Was Within You All Along {.center}

- At its heart, regression is relatively simple. It is just fitting a line of best fit to your data.
- The component parts of a regression model fit together to estimate the explained variance (the intercept and slope), and the unexplained variance (the error term). This allows us to make predictions and quantify the uncertainty of those predictions.
- Linear regression is not magic (even if it often feels that way). 
  - The magic comes from good theory, good data, and attention to detail (but mostly good theory).

## Further Resources {.center}

- MLU-Explain - [Linear Regression](https://mlu-explain.github.io/linear-regression/)
- Jeremy Balka (jbstatistics) - [Simple Linear Regression](https://youtube.com/playlist?list=PLvxOuBpazmsND0vmkP1ECjTloiVz-pXla&si=kZcNgcWkb6E8170_)
- Josh Starmer (StatQuest) - [Linear Regression and Linear Models](https://youtube.com/playlist?list=PLblh5JKOoLUIzaEkCLIUxQFjPIlapw8nU&si=rN7wtllmY0wAMbFa)
- Jeremy Balka (jbstatistics) - [Deriving the Least Squares Estimators of the Slope and Intercept](https://youtu.be/ewnc1cXJmGA?si=MC3l-OC-9EZow2UF)
- Andrew Gelman, Jennifer Hill, & Aki Vehtari - [Regression & Other Stories](https://users.aalto.fi/~ave/ROS.pdf)

# Thank You!

Contact:
<br>

<ul >
{{< fa solid envelope >}} [paul.johnson50@nhs.net](mailto: paul.johnson50@nhs.net)
</ul>


Code & Slides:
<br>

<ul >
{{< fa brands github >}}[/NHS-South-Central-and-West/linear-regression-from-scratch](https://github.com/nhs-south-central-and-west/linear-regression-from-scratch)
</ul>

## References
